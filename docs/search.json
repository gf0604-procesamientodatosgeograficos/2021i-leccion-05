{
  "articles": [
    {
      "path": "01-git.html",
      "title": "El sistema de control de versiones Git",
      "author": [
        {
          "name": "Manuel Vargas",
          "url": "https://github.com/mfvargas"
        }
      ],
      "contents": "\r\n\r\nContents\r\nCaracterísticas generales de Git\r\n¿Cómo funciona Git?\r\nEjemplos de uso\r\nClonación de un repositorio remoto y “push” de los cambios efectuados localmente\r\n\r\n\r\nCaracterísticas generales de Git\r\nGit es un sistema de control de versiones diseñado para rastrear cambios en el código fuente durante el proceso de desarrollo de software. Sin embargo, puede ser utilizado para llevar el control de los cambios en cualquier conjunto de archivos (ej. documentación, música). Un sistema de control de versiones proporciona, entre otras ventajas:\r\nLa capacidad de recuperar versiones anteriores del conjunto de archivos (ej. un release anterior del software).\r\nLa capacidad de integrar modificaciones efectuadas por varias personas en el conjunto de archivos.\r\nLa capacidad de mantener varias “ramas” (branches) de un producto (ej. “estable”, “evaluación”, “inestable”, como en el caso de Debian Linux, GRASS GIS y muchos otros proyectos de software libre).\r\nFacilidades para mantener redundancia y respaldos de los archivos (ej. Programa de respaldos de GitHub).\r\nGit fue desarrollado por Linus Torvalds en 2005 durante del desarrollo del kernel del sistema operativo Linux. Se caracteriza por ser un sistema de control de versiones distribuido, lo que significa que el código fuente puede estar alojado en la estación de trabajo de cualquier miembro del equipo de desarrollo (i.e. no hay un repositorio “central”). Es un proyecto de software libre que se comparte mediante una licencia GNU General Public Licence (GNU GPL).\r\nEl protocolo de Git es utilizado en varios sitios que proveen servicios de alojamiento de software, entre los que están SourceForge, Bitbucket, GitLab y GitHub.\r\n¿Cómo funciona Git?\r\nDesde el punto de vista de un usuario de Git (ej. un programador), Git se utiliza para sincronizar la versión local de un conjunto de archivos, llamado proyecto o repositorio, con la versión que está alojada en un sistema remoto (ej. GitHub). Cada repositorio se almacena en un directorio (carpeta) del sistema operativo. La sincronización se realiza principalmente a través de dos operaciones:\r\npush: para “subir” al repositorio remoto los cambios realizados en el repositorio local. Esta operación se realiza mediante el comando git push. Es probable que el sistema remoto le solicite al usuario algún tipo de autenticación (ej. nombre de usuario y clave).\r\npull: para “bajar” al repositorio local los cambios realizados en el repositorio remoto. Esta operación se realiza mediante el comando git pull.\r\nLas operaciones push y pull se ilustran en la figura 1:\r\nFigura 1: Operaciones push y pull. Imagen de Melinda Higgins (https://www.coursera.org/learn/reproducible-templates-analysis/lecture/NGbQv/git-and-github-part-1)Antes de un push, el usuario debe seleccionar los archivos que desea subir mediante el comando git add, el cual pasa los archivos a un “área de espera” (staging area). Luego debe usarse el comando git commit para “guardar” los cambios en el área de espera.\r\nLa relación entre estas operaciones de Git, se ilustra en la figura 2:\r\nFigura 2: Operaciones de Git. Imagen de Steven Klavins (https://medium.com/@stevenklavins94/version-control-part-4-c9387cf5b33e)En la figura 3 se muestra la función de algunos de los comandos de Git mediante una comparación con el procesamiento de una compra en línea:\r\nFigura 3: Operaciones de Git y compras en línea. Imagen de Melinda Higgins (https://www.coursera.org/learn/reproducible-templates-analysis/lecture/NGbQv/git-and-github-part-2)Otros comandos de Git de uso frecuente son:\r\ngit config: para especificar opciones globales de la sesión de Git (ej. nombre del usuario, dirección de corre electrónico).\r\ngit clone: para clonar (i.e. copiar) un repositorio remoto en la computadora local.\r\ngit status: para revisar el estado de los archivos y, por ejemplo, saber cuales deben pasarse al área de espera.\r\nEjemplos de uso\r\nClonación de un repositorio remoto y “push” de los cambios efectuados localmente\r\nEn este ejemplo de flujo de trabajo, se clonará un repositorio remoto en la computadora local, se realizarán cambios en uno de sus archivos y se “subirán” de vuelta al repositorio remoto mediante la operación push de Git.\r\nPara seguir este ejemplo:\r\nBifurque (fork) a su cuenta en GitHub el repositorio localizado en la dirección https://github.com/gf0604-procesamientodatosgeograficos/2021i-tutorial-git-repo-ejemplo.\r\nCon la opción File - New Project - Version Control - Git de RStudio, clone a su computadora el repositorio que acaba de bifurcar.\r\nCon el editor de RStudio, abra el archivo README.md y agregue una línea.\r\nLuego, ejecute los siguientes comandos desde la la ventana Terminal de RStudio. Nota: las líneas que empiezan con # son comentarios.\r\n# 1. Revisión de los archivos con modificaciones.\r\n$ git status\r\n\r\n# 2. Adición de los archivos modificados al \"área de espera\".\r\n# El punto (.) indica que se agregarán todos los archivos modificados.\r\n$ git add .\r\n\r\n# 3. Almacenamiento (commit) del conjunto de archivos modificados, junto con un mensaje explicativo.\r\n$ git commit -m \"Agregar línea 2\"\r\n\r\n# 4. \"Subida\" (push) de las modificaciones al repositorio remoto.\r\n$ git push\r\nRevise los cambios aplicados en el repositorio remoto en GitHub. Si se realizan nuevos cambios en el repositorio local, deben repetirse los pasos del 1 al 4. Los comentarios en el commando commit deben reflejar los cambios realizados.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-04-21T23:33:47-06:00"
    },
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-04-21T22:07:55-06:00"
    },
    {
      "path": "index.html",
      "title": "GF0604 Procesamiento de datos geográficos 2021-I. Lección 05",
      "description": "Curso GF0604 Procesamiento de datos geográficos. Escuela de Geografía, Universidad de Costa Rica. Primer ciclo lectivo 2021. Lección 05.\n",
      "author": [
        {
          "name": "Manuel Vargas",
          "url": "https://github.com/mfvargas"
        }
      ],
      "contents": "\r\n\r\nContents\r\nResumen\r\nTrabajo previo\r\nContenidos\r\n\r\nResumen\r\nEn esta lección, se estudiará el sistema de control de versiones Git.\r\nTrabajo previo\r\nRealice el tutorial The Best Git Tutorials.\r\nInstale el sistema para control de versiones Git en su computadora.\r\nInstale R y RStudio en su computadora (es importante hacerlo en ese orden). Puede aceptar las opciones que los programas instaladores le presentan por defecto. Si lo desea, puede ver los siguientes videos que muestran detalladamente el proceso de instalación en los sistemas operativos Windows, macOS y Linux (Ubuntu).\r\nContenidos\r\n01 El sistema de control de versiones Git\r\n\r\n\r\n\r\n",
      "last_modified": "2021-04-21T22:38:40-06:00"
    }
  ],
  "collections": []
}
